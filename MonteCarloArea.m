% Example of code that uses Monte Carlo methods to find the area of an% irregular shape: find the horizontal projection area of the jagged terrain%% BME 504/BKN 504 Francisco Valero-Cuevas, Copyright 2011clear all;close all;%****************  Define the equal ranges for variables X and YUB = 10;LB = -10;x_lb = LB;x_ub = UB;y_lb = LB;y_ub = UB;%**************** Create the terrain for the function to be optimized that% represents a very rough terrain[X,Y] = meshgrid(LB:.1:UB);R = sqrt(X.^2 + Y.^2) + 1.5*sin(2*X+14) + 2* cos(3*Y+5) + eps;Z = sin(R)./R;% + X*.1 + Y * .005;% Show the terrain in Figure 1fig1= surf(X,Y,Z,'FaceColor','interp',...    'EdgeColor','none',...    'FaceLighting','phong');daspect([5 5 1])axis tightview(-50,30)camlight lefttitle('Z function')%**************** Sample n random values of X and Yn = 100000;threshold = 0.8;% SETTING SEED HERE, so that each time you run this you get a different set% of random numberststart = clock;seed = round(sum(1000*tstart));rand('state',seed);             % NOTE: This sets the seed for the UNIFORM distribution only.% save tempseed seed -ASCII;    % Saving seed if you want to repeat the exact same simulation later.xr = random('unif', x_lb, x_ub, n, 1);yr = random('unif', y_lb, y_ub, n, 1);% Plot the histogram of the n random values of X and Yfig2 = figure;subplot(211); hist(xr);subplot(212); hist(yr);title('Histograms of X and Y')fig3 = figure;contour (X, Y, Z, [threshold threshold])title('Complex region')holdarea = 0;runningarea = [0];goodindex = [1];coefvariation =[0];%Monte Carlo (iterative) Loopfor i = 1:n    X = random('unif', x_lb, x_ub, 1, 1);    Y = random('unif', y_lb, y_ub, 1, 1);    R = sqrt(X.^2 + Y.^2) + 1.5*sin(2*X+14) + 2* cos(3*Y+5) + eps;    Z = sin(R)./R;% + X*.1 + Y * .005;    if Z>threshold        area = (area + 1);        plot(X,Y,'r.');        runningarea = [runningarea; area/i];        goodindex = [goodindex; i];        coefvariation = [coefvariation; 100*std(runningarea)/mean(runningarea)];    endendhold;runningarea(end) %This is the final estimate of the normalized areafig4 = figure;subplot(211);plot(goodindex, runningarea, '.','MarkerSize',10)title('Progression of proportion of points in the target region')subplot(212);plot(goodindex, coefvariation, '.','MarkerSize',10)title('Progression of coefficient of variation')